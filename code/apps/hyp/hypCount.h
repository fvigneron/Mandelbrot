//
//  hypCount.h
//
//  Authors: Nicolae Mihalache, François Vigneron
//
//  Please cite the references below if you use or distribute this software.
//
//  • [1] N. Mihalache & F. Vigneron. How to split a tera-polynomial. 2021.
//  • [2] N. Mihalache & F. Vigneron. How to compute the coefficients of holomorphic maps. 2021.
//
//  Copyright 2019 - 2021 Univ. Paris-Est Créteil, Univ. de Reims Champagne-Ardenne.
//  This software is released under the GNU Public Licence v3.0
//

/**
  \file hypCount.h
  \brief This app checks the unicity and the total number of the hyperbolic centers of a given period.
 
  It uses the files generated by hypCountMain() that normally contain all hyperbolic centers without repetitions. It checks the MD5
  checksum of @c nset files and cetifies that the correct number of hyperbolic centers are present. It does not attempt to prove
  the corectness of each parameter, use @c hypProveMain() for that.
 
  The code is writen for transparency, that is, ease of verification. It is neither optimal, nor the shortest possible: that would be using
  the functions in nSet.h.
*/

#ifndef hypCount_h
#define hypCount_h

#include "u128c.h"


/// @brief Loads the points stored in the @c nset file with path @c fileName.
///
/// For transparency, it does not use the class nSet.h.
///
/// @param fileName the path to the file
/// @param count the number of points present in the file and returned as a vector
/// @param realCount the number of real points in the list (that have imaginary par at most half the @c eps stored in the file)
/// @param eps the distance up to which two coordinates are considered equal
/// @param verbose @ref true to print the progess and timings to the console
///
/// @return the list of points loaded, @c NULL if some error occured, including mismatch of the MD5 checksum
u128_ptr count_load_and_check_nset(char *fileName, ulong *count, ulong *realCount, ulong *eps, bool verbose);

/// @brief Check that a list of @c u128 points is strictly increasing.
///
/// @param list the list
/// @param count the length of the list
///
/// @return @ref true if the list is strictly increasing, @ref false otherwise
bool count_check_increasing(u128_ptr list, ulong count);

/// @brief Check that in a strictly increasing list of @c u128 points any two points are at distance larger than @c eps.
///
/// @param list the list
/// @param count the length of the list
/// @param eps the minimal distance on at least one coordinate
///
/// @return @ref true if the smallest distance is larger than @c eps, @ref false otherwise
bool count_check_min_dist(u128_ptr list, ulong count, ulong eps);

/// @brief Checks that two strictly increasing lists of points, each containing points at distance larger than @c eps from
/// each other, do not contain two points at distance at most @c eps.
///
/// @param left the list on the left
/// @param lc the length of the list on the left
/// @param right the list on the right
/// @param rc the length
/// @param eps the minimal distance
///
/// @return @ref true if the smallest distance is larger than @c eps, @ref false otherwise
bool count_check_boundary(u128_ptr left, ulong lc, u128_ptr right, ulong rc, ulong eps);

/// @brief Count the real points in the list.
///
/// @param list the list
/// @param count the length of the list
/// @param eps the distance up to which two points are considered equal
///
/// @return the number of real points in the list, up to distance @c eps/2 from the real axis
ulong count_real_count(u128_ptr list, ulong count, ulong eps);

/// @brief Interprets the command line arguments and launches the final count of the hyperbolic centers.
///
/// @param argc the number of command line arguments
/// @param argv the command line arguments
///
/// @return @c 0 if successfull, @c 1 otherwise
int hyp_count_main(int argc, const char * argv[]);

#endif /* hypCount_h */
